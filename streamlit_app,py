#Final Model 
import streamlit as st
st.set_page_config(page_title="Vedsu Technology", page_icon="ðŸ“§")

import pandas as pd
import numpy as np
import time
import openai
from openai.error import OpenAIError
import re
import concurrent.futures
import streamlit as st

df = pd.DataFrame()
df_csv = pd.DataFrame()

uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])



# Set the OpenAI API key
openai.api_key = ENTER YOUR OPEN AI KEY HERE
count = 0
def process_job_title(title):
   
    global count
    count += 1
   
    prompt = f"""  Correct the "provided job title" for Industry "Human Resource" and assign  "standard global job titles" 
            1. Extract the most appropriate standard 'designations' from the assigned ""standard global job titles"" separated by commas, in their standard full form and correct any spelling or typo errors if any.
            2. Remove 'roles' and 'departments' from 'designations'.
            3. Also suggest the 'Department' for that 'designations' that can help in segmentation in email marketing,in their standard full form separated by commas.
            4. Add 'roles' and 'departments' extracted from "provided job title" in 'Department'.
            5. There should not be any 'special characters' and 'numbers' like '2nd', '2', 'Li' in 'designations'.
            6. Don't repeat "provided job title" in extracted 'designations'.
            
            whenever I provide input in the format 
            1. Job Title: 
            
            Remember to just give output in the exact format like 
            
            1. Designations: 
            
            2. Department:  
            
            Job Title : {title}
        """

    # Initialize variables for retry behavior
    retries = 3
    success = False

    while not success and retries > 0:
        try:
            # Make the API call
            response = openai.Completion.create(
                engine="text-davinci-003",
                prompt=prompt,
                temperature=0.5,
                max_tokens=200
            )

            # Extract and print the corrected job title
            corrected_job_title = response['choices'][0]['text'].strip().replace("Answer:", "")
            output = corrected_job_title
            try:
                # Splitting the output into two parts
                designations_part, industries_part = output.split("Department")

                # Cleaning and formatting the parts
                designations_part = designations_part.strip().replace("Designations:", "")
                # Remove all instances of "Designations:"
                while "Designations" in designations_part:
                    designations_part = designations_part.strip().replace("Designations :", "")

                industries_part = industries_part.strip().replace(":", "")
                # print (designations_part, industries_part, title)
                return (title, designations_part, industries_part)
            except :
                st.write(count)
                return (title ,  title, title)

        except openai.OpenAIError as e:
            st.write(f"Wait I'm Retrying...")
            # print(f"Error: {e}. Retrying...")
            retries -= 1
            time.sleep(5)  # Wait for 5 seconds before retrying

    if not success:
        print(f"Failed to update after 3 retries for {title}. Skipping...")
        return None

def main():
    
    if uploaded_file:
        df_csv = pd.read_csv(uploaded_file, encoding="ISO-8859-1")
        # Record the start time
        start_time = time.time()

        print("Processing.........")
        # Initialize an empty list to store the results
        designations_part_list = []
        industries_part_list = []
        title_list = []
        
        # Process job titles in parallel using ThreadPoolExecutor
        with concurrent.futures.ThreadPoolExecutor() as executor:
            for result in executor.map(process_job_title, df_csv["JobTitle"]):
                if result is not None:
                    designations_part, industries_part, title = result
                    designations_part_list.append(designations_part)
                    industries_part_list.append(industries_part)
                    title_list.append(title)

      
        # Record the end time
        end_time = time.time()

        # Calculate the elapsed time
        elapsed_time = end_time - start_time

        # Display the elapsed time in seconds
        st.write(f"Elapsed Time: {elapsed_time} seconds")
        
      
        df = pd.DataFrame({
            'Job Title': designations_part_list,
            'Correct Title': industries_part_list,
            'Department': title_list
        })
        
        st.write(df)

        st.success("Excel file generated successfully")

        csv_content = df.to_csv(index=False)

        st.download_button(
            label="Download CSV",
            data=csv_content,
            file_name="Job Title.csv",
            mime="text/csv"
        )





if __name__ == "__main__":
    main()

   




    
